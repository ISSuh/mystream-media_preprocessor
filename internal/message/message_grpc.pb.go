// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaFrame_SendFrame_FullMethodName = "/message.MediaFrame/SendFrame"
)

// MediaFrameClient is the client API for MediaFrame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaFrameClient interface {
	SendFrame(ctx context.Context, opts ...grpc.CallOption) (MediaFrame_SendFrameClient, error)
}

type mediaFrameClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaFrameClient(cc grpc.ClientConnInterface) MediaFrameClient {
	return &mediaFrameClient{cc}
}

func (c *mediaFrameClient) SendFrame(ctx context.Context, opts ...grpc.CallOption) (MediaFrame_SendFrameClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaFrame_ServiceDesc.Streams[0], MediaFrame_SendFrame_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaFrameSendFrameClient{stream}
	return x, nil
}

type MediaFrame_SendFrameClient interface {
	Send(*Frame) error
	CloseAndRecv() (*Disconnected, error)
	grpc.ClientStream
}

type mediaFrameSendFrameClient struct {
	grpc.ClientStream
}

func (x *mediaFrameSendFrameClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaFrameSendFrameClient) CloseAndRecv() (*Disconnected, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Disconnected)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaFrameServer is the server API for MediaFrame service.
// All implementations must embed UnimplementedMediaFrameServer
// for forward compatibility
type MediaFrameServer interface {
	SendFrame(MediaFrame_SendFrameServer) error
	mustEmbedUnimplementedMediaFrameServer()
}

// UnimplementedMediaFrameServer must be embedded to have forward compatible implementations.
type UnimplementedMediaFrameServer struct {
}

func (UnimplementedMediaFrameServer) SendFrame(MediaFrame_SendFrameServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFrame not implemented")
}
func (UnimplementedMediaFrameServer) mustEmbedUnimplementedMediaFrameServer() {}

// UnsafeMediaFrameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaFrameServer will
// result in compilation errors.
type UnsafeMediaFrameServer interface {
	mustEmbedUnimplementedMediaFrameServer()
}

func RegisterMediaFrameServer(s grpc.ServiceRegistrar, srv MediaFrameServer) {
	s.RegisterService(&MediaFrame_ServiceDesc, srv)
}

func _MediaFrame_SendFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaFrameServer).SendFrame(&mediaFrameSendFrameServer{stream})
}

type MediaFrame_SendFrameServer interface {
	SendAndClose(*Disconnected) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type mediaFrameSendFrameServer struct {
	grpc.ServerStream
}

func (x *mediaFrameSendFrameServer) SendAndClose(m *Disconnected) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaFrameSendFrameServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaFrame_ServiceDesc is the grpc.ServiceDesc for MediaFrame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaFrame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MediaFrame",
	HandlerType: (*MediaFrameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFrame",
			Handler:       _MediaFrame_SendFrame_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
